/* 4 mass point */
/* 3 mass point leads det A = 0 for no-constraint*/


ratprint: false$

declare ("'", alphabetic)$
depends([x0, y0] , t)$
depends([z] , t)$
depends([th0, th1, th2] , t)$
depends([u1, u2] , t)$

size(M):=[length(M),length(args(M))]$
sizev(M):=length(M)$

grind:true;
showmat(m):= for i thru length(m) do
    for j thru length(transpose(m)) do
        block([], printf(true,"~d:~d=~%  ~a~%", i-1,j-1, m[i][j]))$

load ("f90")$
f90_output_line_length_max:10000000$
showmatf90(m):= for i thru length(m) do
    for j thru length(transpose(m)) do
    block([], printf(true,"[~d][~d] = ", i-1,j-1), f90(m[i][j]))$

symbolilze(M):= subst([ diff(x0,t,2)=ddx0
                      , diff(y0,t,2)=ddy0
                      , diff(z,t,2)=ddz
                      , diff(th0,t,2)=ddth0
                      , diff(th1,t,2)=ddth1
                      , diff(th2,t,2)=ddth2
                      , diff(x0,t,1)=dx0
                      , diff(y0,t,1)=dy0
                      , diff(z,t,1)=dz
                      , diff(th0,t,1)=dth0
                      , diff(th1,t,1)=dth1
                      , diff(th2,t,1)=dth2
                    ], M)$
ground(M):= subst([dx0=0 , ddx0=0 , dy0=0, ddy0=0 ], M)$


/*------------*/
/* Parameters */
/*------------*/
/* [m] [rad] */
/* sqrt(k /(m0+m1+m2+m3)) = 1 */
/*
l0: (2.5 * 16 / 100)$
l1: (2.5 * 16 / 100)$
l2: (2.5 * 16 / 100)$
g:9.8 $
m0:1$
m1:10$
m2:10$
m3:10$
maxTau: 30Nm~100Nm
k: 30~50
*/

/*------------*/
/* Kinematics */
/*------------*/

x1: x0 + (z + l0) * cos(th0)$
y1: y0 + (z + l0) * sin(th0)$

x2: x1 + l1 * cos(th1 + th0)$
y2: y1 + l1 * sin(th1 + th0)$

x3: x2 + l2 * cos(th2 + th1 + th0)$
y3: y2 + l2 * sin(th2 + th1 + th0)$

xc: (m0 * x0 + m1 * x1 + m2 * x2 + m3 * x3) / (m0 + m1 + m2) $
yc: (m0 * y0 + m1 * y1 + m2 * y2 + m3 * y3) / (m0 + m1 + m2) $

f90(expand(xc - x0))$
f90(expand(yc - y0))$

/*----------*/
/* dynamics */
/*----------*/

th0': diff(th0, t)$
th1': diff(th1, t)$
th2': diff(th2, t)$
x0': diff(x0, t)$
y0': diff(y0, t)$
z': diff(z, t)$
x1': diff(x1, t)$
y1': diff(y1, t)$
x2': diff(x2, t)$
y2': diff(y2, t)$
x3': diff(x3, t)$
y3': diff(y3, t)$

/*
f90(symbolilze(x1'-x0'))$
f90(symbolilze(y1'-y0'))$
f90(symbolilze(x2'-x1'))$
f90(symbolilze(y2'-y1'))$
f90(symbolilze(x3'-x2'))$
f90(symbolilze(y3'-y2'))$
*/

th0'': diff(th0', t)$
th1'': diff(th1', t)$
th2'': diff(th2', t)$
x0'': diff(x0', t)$
y0'': diff(y0', t)$
z'': diff(z', t)$

/*----------*/
/* Lagrange */
/*----------*/

v0: x0'**2 + y0'**2$
v1: x1'**2 + y1'**2$
v2: x2'**2 + y2'**2$
v3: x3'**2 + y3'**2$

U0: y0 * m0 * g$
K0_trs: 1/2 * m0 * v0$

U1: y1 * m1 * g$
K1_trs: 1/2 * m1 * v1$

U2: y2 * m2 * g$
K2_trs: 1/2 * m2 * v2$

U3: y3 * m3 * g$
K3_trs: 1/2 * m3 * v3$

L: K0_trs + K1_trs + K2_trs + K3_trs - U0 - U1 - U2 - U3 - 1/2*k*(z)*(z)$

/* CASE1: air  fx0=fy0=0*/
X : [x0, y0, z, th0, th1, th2]$
dX : [x0', y0', z', th0', th1', th2']$
ddX : symbolilze([x0'', y0'', z'', th0'', th1'', th2''])$
rhs : symbolilze(expand(diff(jacobian([L],dX), t) - jacobian([L], X)))$
A:trigrat(trigsimp(expand(trigexpand(jacobian(args(rhs)[1], ddX)))))$
b:(expand(transpose(rhs) - (jacobian(args(rhs)[1], ddX)).transpose(matrix(ddX))))$
showmatf90(A)$
showmatf90(b)$


/* CASE2: ground  dx0=ddx0=dy0=ddy0=0 */
/*
X : [z, th0, th1, th2]$
dX : [z', th0', th1', th2']$
ddX : symbolilze([z'', th0'', th1'', th2''])$
rhs : expand(ground(symbolilze(diff(jacobian([L],dX), t) - jacobian([L], X))))$
A:trigrat(trigsimp(expand(trigexpand(jacobian(args(rhs)[1], ddX)))))$
b:(expand(transpose(rhs) - (jacobian(args(rhs)[1], ddX)).transpose(matrix(ddX))))$
showmatf90(A)$
showmatf90(b)$
*/

/* CASE3: collision */
/* 
[A11, A12] dx   = df
[A21, A22] dth    0
<=>
dth = - A22 ^-1 A21 dx
*/
/*
X : [x0, y0, z, th0, th1, th2]$
dX : [x0', y0', z', th0', th1', th2']$
rhs : symbolilze(expand(diff(jacobian([L],dX), t) - jacobian([L], X)))$
ddX : symbolilze([x0'', y0'', z'', th0'', th1'', th2''])$
A:trigrat(trigsimp(expand(trigexpand(jacobian(args(rhs)[1], ddX)))))$
A1:submatrix(1,2,A,3,4,5,6)$
A2:submatrix(1,2,A,1,2)$
ddxy : symbolilze([x0'', y0''])$
offset:A1 . transpose(matrix(ddxy))$
showmat(offset)$
showmat(A2)$
*/
/* ddothers = inv(A2) . offset */

