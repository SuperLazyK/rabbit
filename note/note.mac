/* grind(dth0+dth1); */

declare ("'", alphabetic);
depends([x0, y0] , t);
depends([th0, th1, th2] , t);


/*------------*/
/* Kinematics */
/*------------*/

x1: x0 + l0 * cos(th0);
y1: y0 + l0 * sin(th0);

x2: x1 + l1 * cos(th0 + th1);
y2: y1 + l1 * sin(th0 + th1);

xc0: x1;
yc0: y1;

xc1: x2;
yc1: y2;

xc2: x2 + l2 * cos(th0 + th1 + th2);
yc2: y2 + l2 * sin(th0 + th1 + th2);

/*----------*/
/* dynamics */
/*----------*/

dth0: diff(th0, t);
dth1: diff(th1, t);
dth2: diff(th2, t);

dx0: diff(x0, t);
dy0: diff(y0, t);

ddth0: diff(dth0, t);
ddth1: diff(dth1, t);
ddth2: diff(dth2, t);

ddx0: diff(dx0, t);
ddy0: diff(dy0, t);

dxc0: diff(xc0, t);
dyc0: diff(yc0, t);

dxc1: diff(xc1, t);
dyc1: diff(yc1, t);

dxc2: diff(xc2, t);
dyc2: diff(yc2, t);

/*----------*/
/* Lagrange */
/*----------*/

vc0: dxc0**2 + dyc0**2;
vc1: dxc1**2 + dyc1**2;
vc2: dxc2**2 + dyc2**2;

U0: yc0 * m0 * g;
K0_trs: 1/2 * m0 * vc0;
K0_rot: 0;


U1 : yc1 * m1 * g;
K1_trs : 1/2 * m1 * vc1;
K1_rot : 0;


U2 : yc2 * m2 * g;
K2_trs : 1/2 * m2 * vc2;
K2_rot : 0;

X : [x0, y0, th0, th1, th2];
dX : [dx0, dy0, dth0, dth1, dth2];
ddX : [ddx0, ddy0, ddth0, ddth1, ddth2];

L : K0_trs + K0_rot + K1_trs + K1_rot + K2_trs + K2_rot - U0 - U1 - U2;
rhs: diff(jacobian([L],dX), t) - jacobian([L], X);
/*grind(col(rhs, 5));*/
lhs:matrix([fx0, fy0, tau0, tau1, tau2]);

grind(subst([diff(x0,t,2)=x0''], rhs));
/*

def replace_sym(exp):

    return exp.subs(
        [ (ddx0,  symddx  )
        , (ddy0,  symddy  )
        , (ddth0, symddth0)
        , (ddth1, symddth1)
        , (ddth2, symddth2)
        , (dx0, symbols("dx0"))
        , (dy0, symbols("dy0"))
        , (dth0, symbols("dth0"))
        , (dth1, symbols("dth1"))
        , (dth2, symbols("dth2"))
        , (x0, symbols("x0"))
        , (y0, symbols("y0"))
        , (cos(th0), symbols("c0"))
        , (cos(th1), symbols("c1"))
        , (cos(th2), symbols("c2"))
        , (cos(th0+th1), symbols("c01"))
        , (cos(th0+th1+th2), symbols("c012"))
        , (cos(th1+th2), symbols("c12"))
        , (sin(th0), symbols("s0"))
        , (sin(th1), symbols("s1"))
        , (sin(th2), symbols("s2"))
        , (sin(th0+th1), symbols("s01"))
        , (sin(th0+th1+th2), symbols("s012"))
        , (sin(th1+th2), symbols("s12"))
        , (th0, symbols("th0"))
        , (th1, symbols("th1"))
        , (th2, symbols("th2"))
        ])



*/

