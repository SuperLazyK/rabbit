/* 3 mass point leads det A = 0 for no-constraint*/


ratprint: false$

declare ("'", alphabetic)$
depends([xr, yr] , t)$
depends([z] , t)$
depends([thr, thk, th0, thw] , t)$
depends([u1, u2] , t)$

size(M):=[length(M),length(args(M))]$
sizev(M):=length(M)$

cross(px,py,vx,vy):=px*vy - py*vx$

sqsum(x, y):= x**2 + y**2$

grind:true;
showmat(m):= for i thru length(m) do
    for j thru length(transpose(m)) do
        block([], printf(true,"~d:~d=~%  ~a~%", i-1,j-1, m[i][j]))$

load ("f90")$
f90_output_line_length_max:10000000$
showmatf90(m):= for i thru length(m) do
    for j thru length(transpose(m)) do
    block([], printf(true,"[~d][~d] = ", i-1,j-1), f90(m[i][j]))$

symbolilze(M):= subst([ diff(xr,t,2)=ddxr
                      , diff(yr,t,2)=ddyr
                      , diff(z,t,2)=ddz
                      , diff(thr,t,2)=ddthr
                      , diff(thk,t,2)=ddthk
                      , diff(thw,t,2)=ddthw
                      , diff(th0,t,2)=ddth0
                      , diff(xr,t,1)=dxr
                      , diff(yr,t,1)=dyr
                      , diff(z,t,1)=dz
                      , diff(thr,t,1)=dthr
                      , diff(thk,t,1)=dthk
                      , diff(thw,t,1)=dthw
                      , diff(th0,t,1)=dth0
                    ], M)$
ground(M):= subst([dxr=0 , ddxr=0 , dyr=0, ddyr=0 ], M)$
air(M):= subst([dz=0 , z=0, ddz=0], M)$
configure_param(M):= subst([ m0=15
                           , mk=5
                           , mw=10
                           , m1=40
                           , mt=5
                           , l0 = 0.4
                           , l1 = 0.5
                           , l2 = 0.3
                     ], M)$

x0: xr - (z + z0) * sin(thr)$
y0: yr + (z + z0) * cos(thr)$

xt: x0 - lt * sin(thr)$
yt: y0 + lt * cos(thr)$

xk: x0 - l0 * sin(thr + th0)$
yk: y0 + l0 * cos(thr + th0)$

xw: xk - l1 * sin(thr + th0 + thk)$
yw: yk + l1 * cos(thr + th0 + thk)$

x1: xw - l2 * sin(thr + th0 + thk + thw)$
y1: yw + l2 * cos(thr + th0 + thk + thw)$

xc: (m0 * x0 + m1 * x1 + mk * xk + mw * xw + mt * xt) / (m0 + m1 + mk + mw + mt) $
yc: (m0 * y0 + m1 * y1 + mk * yk + mw * yw + mt * yt) / (m0 + m1 + mk + mw + mt) $


/*----------*/
/* dynamics */
/*----------*/

thr': diff(thr, t)$
thk': diff(thk, t)$
thw': diff(thw, t)$
th0': diff(th0, t)$
z': diff(z, t)$
xr': diff(xr, t)$
yr': diff(yr, t)$
xk': diff(xk, t)$
yk': diff(yk, t)$
xw': diff(xw, t)$
yw': diff(yw, t)$
x0': diff(x0, t)$
y0': diff(y0, t)$
x1': diff(x1, t)$
y1': diff(y1, t)$
xt': diff(xt, t)$
yt': diff(yt, t)$
xc': diff(xc, t)$
yc': diff(yc, t)$

f90(symbolilze(x0'-xr'))$
f90(symbolilze(y0'-yr'))$
f90(symbolilze(xk'-x0'))$
f90(symbolilze(yk'-y0'))$
f90(symbolilze(xw'-xk'))$
f90(symbolilze(yw'-yk'))$
f90(symbolilze(x1'-xw'))$
f90(symbolilze(y1'-yw'))$
f90(symbolilze(xt'-x0'))$
f90(symbolilze(yt'-y0'))$

thr'': diff(thr', t)$
thk'': diff(thk', t)$
th0'': diff(th0', t)$
thw'': diff(thw', t)$
xr'': diff(xr', t)$
yr'': diff(yr', t)$
z'': diff(z', t)$

/* human upper body center */
xhc: (m1 * x1 + mk * xk + mw * xw) / (m1 + mk + mw) $
yhc: (m1 * y1 + mk * yk + mw * yw) / (m1 + mk + mw) $
xhc:xc$
yhc:yc$
/*
hc:[xhc - x0, yhc - y0]$
*/
hc:[xc - x0, yc - y0]$
hc': diff(hc, t)$
vec_thr:[-sin(thr), cos(thr)]$
vec_dthr:[-cos(thr), -sin(thr)]$
rc:hc[1]*vec_thr[1] + hc[2]*vec_thr[2]$
rc': ratsimp(trigreduce(diff(rc, t)))$
thc:hc[1]*vec_dthr[1] + hc[2]*vec_dthr[2]$
thc': ratsimp(trigreduce(diff(thc, t)))$

f90(symbolilze(rc'));
f90(symbolilze(thc'));

/*
r1:(x1-x0)*vec_thr[1] + (y1-y0)*vec_thr[2]$
r1': ratsimp(trigreduce(diff(r1, t)))$
th1:(x1-x0)*vec_dthr[1] + (y1-y0)*vec_dthr[2]$
th1': ratsimp(trigreduce(diff(th1, t)))$

f90(symbolilze(r1'));
f90(symbolilze(th1'));
*/
amoment:  ratsimp(trigreduce(trigsimp(m1 * cross(x1-xr, y1-yr, x1'-xr', y1'-yr')
        + mk * cross(xk-xr, yk-yr, xk'-xr', yk'-yr')
        + mw * cross(xw-xr, yw-yr, xw'-xr', yw'-yr')
        + mt * cross(xt-xr, yt-yr, xt'-xr', yt'-yr'))))$
eq_dthr:rhs(solve(symbolilze(amoment)=Ma, dthr)[1]);
/*
*/
f90(ratsimp(symbolilze(rc')=drc))$
f90(ratsimp(symbolilze(thc')=dthc))$
f90(ratsimp(symbolilze(amoment)=0))$

/* inverse kinematics(air) */
/*
dX : [dthk, dthw]$
rhs:ratsimp(symbolilze([rc', thc']))$
A:jacobian(rhs,dX)$
showmatf90(A)$
b:(expand(rhs - A . dX))$
showmatf90(b);
showmatf90(subst([dth0=0], b));
*/
/* inverse kinematics(air) */
dX : [dth0, dthk, dthw]$
rhs:ratsimp(symbolilze([eq_dthr, rc', thc']))$
A:jacobian(rhs,dX)$
showmatf90(A)$
b:(expand(rhs - A . dX))$
showmatf90(b);
/*
disp(ratsimp(trigsimp(expand(determinant(J)))));
*/

/*----------*/
/* Lagrange */
/*----------*/
U0: y0 * m0 * g$
K0_trs: 1/2 * m0 * sqsum(x0', y0')$

U1: y1 * m1 * g$
K1_trs: 1/2 * m1 * sqsum(x1', y1')$

Uk: yk * mk * g$
Kk_trs: 1/2 * mk * sqsum(xk', yk')$

Uw: yw * mw * g$
Kw_trs: 1/2 * mw * sqsum(xw', yw')$

Ut: yt * mt * g$
Kt_trs: 1/2 * mt * sqsum(xt', yt')$

L: K0_trs + Kk_trs + Kw_trs + K1_trs + Kt_trs - U0 - U1 -Uk - Uw - Ut - 1/2*k*(z)*(z)$

/* CASE1: air  fx0=fy0=0*/
/*
X : [xr, yr, thr, th0, thk, thw]$
dX : [xr', yr', thr', th0', thk', thw']$
ddX : symbolilze([xr'', yr'', thr'', th0'', thk'', thw''])$
disp(ddX);
rhs : air(symbolilze(expand(diff(jacobian([L],dX), t) - jacobian([L], X))))$
*/
/*
rhs : configure_param(air(symbolilze(expand(diff(jacobian([L],dX), t) - jacobian([L], X)))))$
*/
/*
A:(trigsimp(expand(trigexpand(jacobian(args(rhs)[1], ddX)))))$
b:(expand(transpose(rhs) - (jacobian(args(rhs)[1], ddX)).transpose(matrix(ddX))))$
showmatf90(A)$
showmatf90(b)$
*/
/*
disp(ratsimp(trigsimp(expand(determinant(A)))));
*/



/* CASE2: ground*/
/*
X : [z, thr, th0, thk, thw]$
dX : [z', thr', th0', thk', thw']$
ddX : symbolilze([z'', thr'', th0'', thk'', thw''])$
rhs : expand(ground(symbolilze(diff(jacobian([L],dX), t) - jacobian([L], X))))$
A:(trigsimp(expand(trigexpand(jacobian(args(rhs)[1], ddX)))))$
b:(expand(transpose(rhs) - (jacobian(args(rhs)[1], ddX)).transpose(matrix(ddX))))$
showmatf90(A)$
showmatf90(b)$
*/

/* CASE3: collision */
/* 
[A11, A12] dx   = df
[A21, A22] dth    0
<=>
dth = - A22 ^-1 A21 dx
*/
/*
X : [xr, yr, z, thr, th0, thk, thw]$
dX : [xr', yr', z', thr', th0', thk', thw']$
ddX : symbolilze([xr'', yr'', z'', thr'', th0'', thk'', thw''])$
rhs : symbolilze(expand(diff(jacobian([L],dX), t) - jacobian([L], X)))$
A:(trigsimp(expand(trigexpand(subst([z=0], jacobian(args(rhs)[1], ddX))))))$
A21:submatrix(1,2,A,3,4,5,6,7)$
A22:submatrix(1,2,A,1,2)$
showmatf90(A21)$
showmatf90(A22)$
*/

