ratprint: false$
exptsubst: true$

load ("f90")$
load("vect")$
declare ("'", alphabetic)$
grind:true;
cross(v0,v1):=v0[1]*v1[2]-v0[2]*v1[1]$
showmat(m):= for i thru length(m) do
    for j thru length(transpose(m)) do
        block([], printf(true,"~d:~d= ~a~%", i-1,j-1, m[i][j]))$

f90_output_line_length_max:10000000$

normalize(x):=x/sqrt(x . x)$

diff_normalize(vec, l, nvec, vvec) := ratsimp(subst([ sqrt((vec[2])^2+(vec[1])^2)=l
              , diff(vec[1],t) = vvec[1]
              , diff(vec[2],t) = vvec[2]
              , vec[1] = l * nvec[1]
              , vec[2] = l * nvec[2]
    ], diff(normalize(vec),t,1)))$

p:[x, y]$
depends(p, t)$
/*diff_normalize(p, l, [nx, ny], [vx, vy]);*/

p0:[x0, y0]$
p1:[x1, y1]$
p2:[x2, y2]$
depends(p0, t)$
depends(p1, t)$
depends(p2, t)$
p0':diff(p0,t)$
p1':diff(p1,t)$
p2':diff(p2,t)$

p01: p1 - p0$
p02: p2 - p0$
depends(p0, t)$
depends(p1, t)$
n01: [n01x, n01y]$
n02: [n02x, n02y]$

/*
s = trigrat(trigsimp(cross([cos(th1), sin(th1)], [cos(th2), sin(th2)])))$
c = trigrat(trigsimp(cos(th1)*cos(th2) + sin(th1)*sin(th2)))$
s = sin(th2 - th1)
c = cos(th2 - th1)
*/

dn01: diff_normalize(p01, l01, n01, [v1x-v0x,v1y-v0y])$
dn02: diff_normalize(p02, l02, n02, [v2x-v0x,v2y-v0y])$

dcosth102: n01 . dn02 + dn01 . n02$
dsinth102: cross(n01, dn02) + cross(dn01, n02)$
dC: -sin(th02-th01) * dsinth102 + cos(th02-th01)*dcosth102$

trick(M):=trigsimp(subst([n01x=cos(th01), n01y=sin(th01), n02x=cos(th02), n02y=sin(th02)], M))$

showmat(trigrat(trick(trigexpand(ratsimp(jacobian([dC], [v0x,v0y,v1x,v1y,v2x,v2y]))))));









/*

norm(v):=sqrt(v . v)$
unit(v):=v/norm(v)$
d01:express(unit(p01))$
d02:express(unit(p02))$

c:express(d01 . d02) $

s:express(d01 ~ d02) $
repsimp(M):= subst([ sqrt((y1-y0)^2+(x1-x0)^2)=l01
                   , sqrt((y2-y0)^2+(x2-x0)^2)=l02
                   , (y1-y0)^2+(x1-x0)^2=l01*l01
                   , (y2-y0)^2+(x2-x0)^2=l02*l02
                   , abs(l01)=l01
                   , abs(l02)=l02
                   , diff(x0,t,1)=x0'
                   , diff(y0,t,1)=y0'
                   , diff(x1,t,1)=x1'
                   , diff(y1,t,1)=y1'
                   , diff(x2,t,1)=x2'
                   , diff(y2,t,1)=y2'
                   , x2-x0=v2x*l02
                   , y2-y0=v2y*l02
                   , x1-x0=v1x*l01
                   , y1-y0=v1y*l01
                   ], M);
f90(diff(c,t,1));
showmat((trigsimp(ratsimp(jacobian([repsimp(diff(c,t,1))], [x0', y0',x1',y1', x2', y2'])))));
showmat((trigsimp(ratsimp(jacobian([repsimp(diff(s,t,1))], [x0', y0',x1',y1', x2', y2'])))));
*/
/*
depends(c, t)$
depends(s, t)$
th:atan2(c,s)$
C: abs(th - th0)$
dCdt:diff(C,t,1)$
f90(subst([ s**2+c**2=1
          , th0-atan2(c,s)=-signedC
          ], dCdt));
*/
/* check
-((c*'diff(s,t,1)-'diff(c,t,1)*s)*signedC)/abs(signedC)
<=>
-signedC)/abs(signedC) [s,c] . [diff(c,t,1), diff(s,t,1)]

c:express(d01 . d02) $
s:express(d01 ~ d02) $

diff(c,t,1) = diff(d01,t,1) . d02 + d01 . diff(d02,t,1)
diff(s,t,1) = diff(d01,t,1) ~ d02 + d01 ~ diff(d02,t,1)

*/

/*
j:jacobian([dCdt], [p0'[1], p0'[2], p1'[1], p1'[2], p2'[1], p2'[2]]);
showmat(repsimp(j));
*/

/*
v : [z, thr, th0, th1]$
dX : [z', thr', th0', th1']$
ddX : symbolilze([z'', thr'', th0'', th1''])$
rhs : expand(ground(symbolilze(expand(diff(jacobian([L],dX), t) - jacobian([L], X) + jacobian([D],dX)))))$
    p0 = s[2*idx0:2*idx0+2]
    p1 = s[2*idx1:2*idx1+2]
    p2 = s[2*idx2:2*idx2+2]
    signedC = vec2rad(p1-p0, p2-p0) - th
    C = abs(signedC)

*/
